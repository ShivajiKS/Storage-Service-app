'use client';

import { cn } from '@/lib/utils';
import React, { useState } from 'react';
import Dropzone from 'react-dropzone';
import { useUser } from '@clerk/nextjs';
import { db, storage } from '@/db/firebase-config';
import {
   addDoc,
   collection,
   doc,
   serverTimestamp,
   updateDoc,
} from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';

const DropAndDrag = () => {
   const [loading, setLoding] = useState<boolean>(false);
   const { isLoaded, isSignedIn, user } = useUser();

   const maxSize = 25600;

   const OnDropFiles = (uploadedFile: any) => {
      console.log(uploadedFile);
      uploadedFile.forEach((file: any) => {
         console.log('uploadinssssggg...');

         const reader = new FileReader();

         reader.onabort = () => console.log('file reading was aborted');
         reader.onerror = () => console.log('file reading was aborted');
         reader.onload = async () => {
            await uploadFile(file);
         };
         reader.readAsArrayBuffer(file);
      });
   };

   const uploadFile = async (file: any) => {
      if (!user) return;
      if (loading) return;
      console.log('uploadinggg...');

      setLoding(true);

      // file upload functionality
      const docRef = await addDoc(collection(db, 'users', user.id, 'files'), {
         userId: user.id,
         fullName: user?.fullName,
         profileImgage: user?.imageUrl,
         fileName: file.name,
         timeStamp: serverTimestamp,
         type: file.type,
         size: file.size,
      });
      const imageRef = ref(storage, `users/${user.id}/files/${docRef.id}`);

      uploadBytes(imageRef, file).then(async () => {
         const fileDownloadUrl = await getDownloadURL(imageRef);

         await updateDoc(doc(db, 'users', user.id, 'files', docRef.id), {
            downloadUrl: fileDownloadUrl,
         });
      });

      setLoding(false);
   };

   if (loading) {
      <div>uploading....</div>;
   }

   return (
      <Dropzone minSize={0} maxSize={maxSize} onDrop={OnDropFiles}>
         {({
            getRootProps,
            getInputProps,
            isDragActive,
            isDragReject,
            fileRejections,
         }) => {
            let isFileTooLarge =
               fileRejections.length > 0 &&
               fileRejections[0].file.size > maxSize;
            return (
               <section className='m-2'>
                  <div
                     {...getRootProps()}
                     className={cn(
                        'flex h-56 w-screen items-center justify-center rounded-lg border-b border-dashed p-5 text-center text-xl',
                        isDragActive
                           ? 'animate-pulse bg-blue-600 text-white'
                           : 'bg-slate-100/50 text-slate-400 dark:bg-slate-800/80'
                     )}
                  >
                     <input {...getInputProps()} />

                     {!isDragActive && 'Click Here or Drag a files to Upload'}
                     {isDragActive &&
                        !isDragReject &&
                        'Drag to Upload this file'}
                     {isDragReject && 'File type not accepted, Sorry'}
                     {isFileTooLarge && !!isDragActive && (
                        <div>File is too Large</div>
                     )}
                  </div>
               </section>
            );
         }}
      </Dropzone>
   );
};

export default DropAndDrag;
